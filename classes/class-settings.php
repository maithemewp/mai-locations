<?php

/**
 * Adds settings page.
 *
 * Original code generated by the WordPress Option Page generator:
 * @link http://jeremyhixon.com/wp-tools/option-page/
 */
class Mai_Locations_Settings {
	private $options;

	/**
	 * Construct the class.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function __construct() {
		add_action( 'admin_menu', [ $this, 'add_menu_item' ], 12 );
		add_action( 'admin_init', [ $this, 'init' ] );
		add_filter( 'plugin_action_links_mai-locations/mai-locations.php', [ $this, 'add_settings_link' ], 10, 4 );
	}

	/**
	 * Adds menu item for settings page.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function add_menu_item() {
		add_submenu_page(
			'edit.php?post_type=mai_location',
			__( 'Mai Locations', 'mai-locations' ), // page_title
			__( 'Settings', 'mai-locations' ), // menu_title
			'manage_options', // capability
			'mai-locations', // menu_slug
			[ $this, 'add_content' ], // callback
		);
	}

	/**
	 * Adds setting page content.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function add_content() {
		$this->options = mailocations_get_options();

		echo '<div class="wrap">';
			printf( '<h2>%s</h2>', __( 'Mai Locations', 'mai-locations' ) );
			// printf( '<p>%s</p>', __( 'Connect your WordPress website to Matomo Analytics.', 'mai-locations' ) );

			echo '<form method="post" action="options.php">';
				settings_fields( 'mai_locations_group' );
				do_settings_sections( 'mai-locations-section' );
				submit_button();
			echo '</form>';
		echo '</div>';
	}

	/**
	 * Initialize the settings.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function init() {
		register_setting(
			'mai_locations_group', // option_group
			'mai_locations', // option_name
			[ $this, 'sanitize_callback' ] // sanitize_callback
		);

		add_settings_section(
			'mai_locations_settings', // id
			'', // title
			[ $this, 'settings_callback' ], // callback
			'mai-locations-section' // page
		);

		// add_settings_field(
		// 	'enabled', // id
		// 	__( 'Enable tracking', 'mai-locations' ), // title
		// 	[ $this, 'enabled_callback' ], // callback
		// 	'mai-locations-section', // page
		// 	'mai_locations_settings' // section
		// );

		add_settings_field(
			'label_plural', // id
			__( 'Plural Label', 'mai-locations' ), // title
			[ $this, 'label_plural_callback' ], // callback
			'mai-locations-section', // page
			'mai_locations_settings' // section
		);

		add_settings_field(
			'label_singular', // id
			__( 'Singular Label', 'mai-locations' ), // title
			[ $this, 'label_singular_callback' ], // callback
			'mai-locations-section', // page
			'mai_locations_settings' // section
		);

		add_settings_field(
			'base', // id
			__( 'Singular Label', 'mai-locations' ), // title
			[ $this, 'base_callback' ], // callback
			'mai-locations-section', // page
			'mai_locations_settings' // section
		);

		// add_settings_field(
		// 	'debug', // id
		// 	__( 'Enable debugging', 'mai-locations' ), // title
		// 	[ $this, 'debug_callback' ], // callback
		// 	'mai-locations-section', // page
		// 	'mai_locations_settings' // section
		// );
	}

	/**
	 * Sanitized saved values.
	 *
	 * @param array $input
	 *
	 * @return array
	 */
	public function sanitize_callback( $input ) {
		return mailocations_sanitize_options( $input );
	}

	/**
	 * Displays HTML before settings.
	 *
	 * @return string
	 */
	public function settings_callback() {}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	// public function enabled_callback() {
	// 	$constant = defined( 'MAI_ANALYTICS' );
	// 	$value    = $constant ? rest_sanitize_boolean( MAI_ANALYTICS ) : $this->options['enabled'];

	// 	printf(
	// 		'<input type="checkbox" name="mai_locations[enabled]" id="enabled" value="enabled"%s%s> <label for="enabled">%s%s</label>',
	// 		$value ? ' checked' : '',
	// 		$constant ? ' disabled' : '',
	// 		__( 'Enable tracking for this website.', 'mai-locations' ),
	// 		$constant ? ' ' . $this->config_notice() : ''
	// 	);
	// }

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function label_plural_callback() {
		printf( '<input class="regular-text" type="text" name="mai_locations[label_plural]" id="label_plural" value="%s">', $this->options['label_plural'] );
	}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function label_singular_callback() {
		printf( '<input class="regular-text" type="text" name="mai_locations[label_singular]" id="label_singular" value="%s">', $this->options['label_singular'] );
	}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	public function base_callback() {
		$instructions = sprintf( '<a href="%s">%s</a>', get_admin_url( null, 'options-permalink.php' ), __( 'Permalinks', 'mai-locations' ) );
		$instructions = sprintf( __( 'Visit Dashboard > Settings > %s and hit "Save" if updating this setting.', 'mai-locations' ), $instructions );

		printf( '<input class="regular-text" type="text" name="mai_locations[base]" id="base" value="%s">', $this->options['base'] );
		printf( '<p>%s</p>', $instructions );
	}

	/**
	 * Setting callback.
	 *
	 * @since TBD
	 *
	 * @return void
	 */
	// public function debug_callback() {
	// 	$constant = defined( 'MAI_ANALYTICS_DEBUG' );
	// 	$value    = $constant ? rest_sanitize_boolean( MAI_ANALYTICS_DEBUG ) : $this->options['debug'];

	// 	printf(
	// 		'<input type="checkbox" name="mai_locations[debug]" id="debug" value="debug"%s%s> <label for="debug">%s%s</label>',
	// 		$value ? ' checked' : '',
	// 		$constant ? ' disabled' : '',
	// 		__( 'Enable debugging to print data to the Console and Spatie Ray.', 'mai-locations' ),
	// 		$constant ? ' ' . $this->config_notice() : ''
	// 	);
	// }


	/**
	 * Return the plugin action links.  This will only be called if the plugin is active.
	 *
	 * @since TBD
	 *
	 * @param array  $actions     Associative array of action names to anchor tags
	 * @param string $plugin_file Plugin file name, ie my-plugin/my-plugin.php
	 * @param array  $plugin_data Associative array of plugin data from the plugin file headers
	 * @param string $context     Plugin status context, ie 'all', 'active', 'inactive', 'recently_active'
	 *
	 * @return array associative array of plugin action links
	 */
	public function add_settings_link( $actions, $plugin_file, $plugin_data, $context ) {
		$url                 = esc_url( admin_url( 'edit.php?post_type=mai_location' ) );
		$link                = sprintf( '<a href="%s">%s</a>', $url, __( 'Settings', 'mai-locations' ) );
		$actions['settings'] = $link;

		return $actions;
	}
}

new Mai_Locations_Settings;